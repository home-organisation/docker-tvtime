name: Publish

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io


jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    
    outputs:
      image:  ${{ env.REGISTRY }}/${{ steps.image.outputs.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Generate env variable IMAGE_NAME based on repository name
      - name: Generate image name
        id: image
        run: |
          echo "IMAGE_NAME=${{ github.repository }}" | sed 's/docker-//g' >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ github.repository }}" | sed 's/docker-//g' >> $GITHUB_OUTPUT

      # Generate env variable VERSION based on version.txt file
      - name: Generate release version
        id: version
        run: |
          cat ./version.txt | sed 's/^/VERSION=/g' >> $GITHUB_ENV
          cat ./version.txt | sed 's/^/VERSION=/g' >> $GITHUB_OUTPUT

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.3.0
        with:
          cosign-release: 'v2.2.2'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value="v${{ env.VERSION }}"

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  promote_stage:
    if: ${{ github.event_name != 'pull_request' }}
    name: promote to stage
    needs: build
    environment: stage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: run Codefresh prommote pipeline
        uses: codefresh-io/codefresh-pipeline-runner@v8
        with:
          args: "-v ENV=stage -v IMAGE=${{needs.build.outputs.image}}"
        env:
          PIPELINE_NAME: 'media-front/promote'
          TRIGGER_NAME: ${{ github.repository }}
          CF_API_KEY: ${{ secrets.CODEFRESH_TOKEN }}
    
  release:
    if: ${{ github.event_name != 'pull_request' }}
    needs: [ build, promote_stage ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Generate env variable VERSION based on version.txt file
      - name: Generate release image and version
        run: |
          echo ${{needs.build.outputs.image}} | awk -F':' '{print $2}' | sed 's/^/VERSION=/g' >> $GITHUB_ENV
          echo ${{needs.build.outputs.image}} | awk -F':' '{print $1}' | sed 's/^/IMAGE=/g' >> $GITHUB_ENV
          
      # Generate pre-release version
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          prerelease: false
          draft: false

      - name: Tag image latest
        uses: silverlyra/latest-image-action@v0.1.0
        with:
          repository: ${{ env.IMAGE }}
          candidate-tag: ${{ env.VERSION }}

  promote_prod:
    if: ${{ github.event_name != 'pull_request' }}
    name: promote to production
    needs: [ build, promote_stage ]
    environment: production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: run Codefresh prommote pipeline
        uses: codefresh-io/codefresh-pipeline-runner@v8
        with:
          args: "-v ENV=prod -v IMAGE=${{needs.build.outputs.image}}"
        env:
          PIPELINE_NAME: 'media-front/promote'
          TRIGGER_NAME: ${{ github.repository }}
          CF_API_KEY: ${{ secrets.CODEFRESH_TOKEN }}
